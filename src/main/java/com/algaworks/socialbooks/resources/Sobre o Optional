Olá, vou falar sobre pontos importante sobre o Optional utilizado nos LivrosResources!

A principal proposta deste recurso é encapsular o retorno de métodos e informar se um valor do tipo <T> está presente ou ausente.
Com isso é possível:

1. Evitar erros NullPointerException.
2. Parar de fazer verificações de valor nulo do tipo if (cliente != null).
3. Escrever código mais limpo e elegante.

empty
Retorna uma instância de Optional vazia.

Optional<Cliente> retorno = Optional.empty();

of​
Retorna um Optional com o valor fornecido, mas o valor não pode ser nulo. Se não tiver certeza de que o valor não é
nulo use Optional.ofNullable.

Optional<Cliente> retorno = Optional.of(buscaCliente(cpf));

ofNullable​
Se um valor estiver presente, retorna um Optional com o valor , caso contrário, retorna um Optional vazio. Este é um
dos métodos mais indicados para criar um Optional.

Optional<Cliente> retorno = Optional.ofNullable(buscaCliente(cpf));

filter​
Se um valor estiver presente e o valor corresponder ao predicado retorna um Optional com o valor, se não, retorna um
Optional vazio.

Optional<Cliente> retorno = buscaCliente(cpf).filter(cliente -> !cliente.getNome().isEmpty());

isPresent​
Se um valor estiver presente retorna true, se não, retorna false.

Optional<Cliente> retorno = Optional.ofNullable(buscaCliente(cpf));
if (retorno.isPresent()) {
   System.out.println("Cliente encontrado.");
} else {
   System.out.println("Cliente não encontrado.");
}
Atenção: O código acima não é o cenário ideal do uso de Optional.

get​
Se um valor estiver presente retorna o valor, caso contrário, lança NoSuchElementException. Então para usar get é
preciso ter certeza de que o Optional não está vazio.

Optional<Cliente> retorno = Optional.ofNullable(buscaCliente(cpf));
if (retorno.isPresent()) {
   Cliente cliente = retorno.get();
}

ifPresent​
Se um valor estiver presente, executa a ação no valor, caso contrário, não faz nada.

public void login(String cpf, String senha) {
   dao.buscaPorCPF(cpf).
      ifPresent(cliente -> cliente.realizaLogin(senha));
}

map​
Se um valor estiver presente retorna um Optinal com o resultado da aplicação da função de mapeamento no valor,
caso contrário, retorna um Optional vazio.

if (optCliente.isPresent()) {
   String nome = optCliente.map(Cliente::getNome);
}

flatMap​
Semelhante a map, se um valor estiver presente, retorna o resultado da aplicação da função de mapeamento no valor,
 caso contrário retorna um Optional vazio. A diferença é que flatMap pode se aplicado a um mapeamento que também
 retorna um Optional.

Endereco endereco = buscaCliente(cpf).flatMap(Cliente::getEndereco).get();
